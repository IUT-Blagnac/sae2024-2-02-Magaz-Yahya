import unittest

def RLE(chaine):
    result = ""  # Chaine résultat
    nbChar = 1  # Nombre de caractères de répétition
    i = 0  # Compteur
    while i < len(chaine):  # Parcours de la chaine
        while i < len(chaine) - 1 and chaine[i] == chaine[i + 1] and nbChar < 9:  # Boucle répétition de caractères
            nbChar += 1
            i += 1
        result += chaine[i] + str(nbChar)  # Ajouter résultat boucle répétition au résultat
        i += 1
        nbChar = 1  # Réinitialisation du nombre de caractères


def RLE_recursive(chaine, i=0, nbChar=1, result=""):
    if i >= len(chaine):
        return result
    if i < len(chaine) - 1 and chaine[i] == chaine[i + 1] and nbChar < 9:
        return RLE_recursive(chaine, i + 1, nbChar + 1, result)
    else:
        result += chaine[i] + str(nbChar)
        return RLE_recursive(chaine, i + 1, 1, result)

def unRLE(chaine):
    result = ""  # Chaine résultat
    i = 0  # Compteur
    while i < len(chaine):  # Parcours de la chaine compressée
        char = chaine[i]  # Caractère
        nbChar = int(chaine[i + 1])  # Nombre de répétitions
        result += char * nbChar  # Ajouter les répétitions du caractère au résultat
        i += 2  # Passer au prochain caractère compressé
    return result


def unRLE_recursive(chaine, i=0, result=""):
    if i >= len(chaine):
        return result
    char = chaine[i]
    nbChar = int(chaine[i + 1])
    result += char * nbChar
    return unRLE_recursive(chaine, i + 2, result)

class TestAlgo(unittest.TestCase):

    def test_RLE(self):
        self.assertEqual(RLE(""), "")
        self.assertEqual(RLE("abc"), "1a1b1c")
        self.assertEqual(RLE("abbccc"), "1a2b3c")
        self.assertEqual(RLE("aaabaa"), "3a1b2a")
        self.assertEqual(RLE("aAa"), "1a1A1a")
        self.assertEqual(RLE("WWWWWWWWWWWWW"), "9W4W")

    def test_RLE_additional(self):
        self.assertEqual(RLE("a"), "1a")
        self.assertEqual(RLE("A"), "1A")
        self.assertEqual(RLE("@#$"), "1@1#1$")
        self.assertEqual(RLE("aaaaaaaaaaaa"), "9a3a")

    def test_RLE_recursive(self):
        self.assertEqual(RLE_recursive("", 1), "")
        self.assertEqual(RLE_recursive("", 3), "")
        self.assertEqual(RLE_recursive("abc", 1), "1a1b1c")
        self.assertEqual(RLE_recursive("abbccc", 1), "1a2b3c")
        self.assertEqual(RLE_recursive("aaabaa", 1), "3a1b2a")
        self.assertEqual(RLE_recursive("aAa", 1), "1a1A1a")
        self.assertEqual(RLE_recursive("abc", 2), "111a111b111c")
        self.assertEqual(RLE_recursive("abc", 3), "311a311b311c")

        sae_itel1113122113121113222123211211131211121311121321123113213221121113122123211211131221121311121312211213211321322112311311222113311213212322211211131221131211221321123113213221121113122113121113222112131112131221121321131211132221121321132132211331121321232221123113112221131112311322311211131122211213211331121321122112133221121113122113121113222123112221221321132132211231131122211331121321232221121113122113121113222123113221231231121113213221231221132221222112112322211g1113122113121113222123211211131211121311121321123113213221121113122123211211131221121311121312211213211321322112311311222113311213212322211211131221131211221321123113213221121113122113121113222112131112131221121321131211132221121321132132211331121321232221123113112221131112311322311211131122211213211331121321122112133221121113122113121113222123112221221321132132211231131122211331121321232221121113122113121113222123113221231231121113213221231221132221222112112322211o"
        self.assertEqual(sae_ite20, RLE_recursive("SAE Algo", 20))

    def test_RLE_recursive_additional(self):
        self.assertEqual(RLE_recursive("a", 1), "1a")
        self.assertEqual(RLE_recursive("a", 2), "111a")
        self.assertEqual(RLE_recursive("a", 3), "311a")
        self.assertEqual(RLE_recursive("aaaaaaaaaaaa", 1), "9a3a")
        self.assertEqual(RLE_recursive("aaaaaaaaaaaa", 2), "191a131a")
        self.assertEqual(RLE_recursive("aaa", 2), "131a")
        self.assertEqual(RLE_recursive("aaa", 3), "1113111a")

    def test_unRLE(self):
        self.assertEqual(unRLE(""), "")
        self.assertEqual(unRLE("1a1b1c"), "abc")
        self.assertEqual(unRLE("1a2b3c"), "abbccc")
        self.assertEqual(unRLE("3a1b2a"), "aaabaa")
        self.assertEqual(unRLE("1a1A1a"), "aAa")
        self.assertEqual(unRLE("9W4W"), "WWWWWWWWWWWWW")

    def test_unRLE_additional(self):
        self.assertEqual(unRLE("1@1#1$"), "@#$")
        self.assertEqual(unRLE("9a3a"), "aaaaaaaaaaaa")
        self.assertEqual(unRLE("2a2A2a"), "aaAAaa")

    def test_unRLE_recursive(self):
        self.assertEqual(unRLE_recursive("", 1), "")
        self.assertEqual(unRLE_recursive("", 3), "")
        self.assertEqual(unRLE_recursive("1a1b1c", 1), "abc")
        self.assertEqual(unRLE_recursive("1a2b3c", 1), "abbccc")
        self.assertEqual(unRLE_recursive("3a1b2a", 1), "aaabaa")
        self.assertEqual(unRLE_recursive("1a1A1a", 1), "aAa")
        self.assertEqual(unRLE_recursive("111a111b111c", 2), "abc")
        self.assertEqual(unRLE_recursive("311a311b311c", 3), "abc")

    def test_unRLE_recursive_additional(self):
        self.assertEqual(unRLE_recursive("1a", 1), "a")
        self.assertEqual(unRLE_recursive("111a", 2), "a")
        self.assertEqual(unRLE_recursive("311a", 3), "a")
        self.assertEqual(unRLE_recursive("9a3a", 1), "aaaaaaaaaaaa")
        self.assertEqual(unRLE_recursive("111a111a111a", 2), "aaa")

if __name__ == '__main__':
    unittest.main()
