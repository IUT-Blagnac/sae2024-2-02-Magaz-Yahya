package iut.sae.algo;

import org.junit.Test;
import junit.framework.TestCase;

public class AlgoTest extends TestCase {

    /*
     * RLE("") = ""
     * RLE("abc") = "1a1b1c"
     * RLE("abbccc") = "1a2b3c"
     * RLE("aaabaa") = "3a1b2a"
     * RLE("aAa") = "1a1A1a"
     */
    @Test
    public void testRLE() {
        assertEquals("", AlgoSimplicite1.RLE(""));
        assertEquals("1a1b1c", AlgoSimplicite1.RLE("abc"));
        assertEquals("1a2b3c", AlgoSimplicite1.RLE("abbccc"));
        assertEquals("3a1b2a", AlgoSimplicite1.RLE("aaabaa"));
        assertEquals("1a1A1a", AlgoSimplicite1.RLE("aAa"));
        assertEquals("9W4W", AlgoSimplicite1.RLE("WWWWWWWWWWWWW"));
    }

    @Test
    public void testRLEAdditional() {
        assertEquals("1a", AlgoSimplicite1.RLE("a"));
        assertEquals("1A", AlgoSimplicite1.RLE("A"));
        assertEquals("1@1#1$", AlgoSimplicite1.RLE("@#$"));
        assertEquals("9a3a", AlgoSimplicite1.RLE("aaaaaaaaaaaa"));
    }

    /*
     * RLE(str, 1) = RLE(str)
     * RLE(str, 3) = RLE(RLE(RLE(str)))
     */
    @Test
    public void testRLERecursif() {
        try {
            assertEquals("", AlgoSimplicite1.RLE("", 1));
            assertEquals("", AlgoSimplicite1.RLE("", 3));
            
            assertEquals("1a1b1c", AlgoSimplicite1.RLE("abc", 1));
            assertEquals("1a2b3c", AlgoSimplicite1.RLE("abbccc", 1));
            assertEquals("3a1b2a", AlgoSimplicite1.RLE("aaabaa", 1));
            assertEquals("1a1A1a", AlgoSimplicite1.RLE("aAa", 1));

            assertEquals("111a111b111c", AlgoSimplicite1.RLE("abc", 2));
            assertEquals("311a311b311c", AlgoSimplicite1.RLE("abc", 3));

            String saeItel1113122113121113222123211211131211121311121321123113213221121113122123211211131221121311121312211213211321322112311311222113311213212322211211131221131211221321123113213221121113122113121113222112131112131221121321131211132221121321132132211331121321232221123113112221131112311322311211131122211213211331121321122112133221121113122113121113222123112221221321132132211231131122211331121321232221121113122113121113222123113221231231121113213221231221132221222112112322211g1113122113121113222123211211131211121311121321123113213221121113122123211211131221121311121312211213211321322112311311222113311213212322211211131221131211221321123113213221121113122113121113222112131112131221121321131211132221121321132132211331121321232221123113112221131112311322311211131122211213211331121321122112133221121113122113121113222123112221221321132132211231131122211331121321232221121113122113121113222123113221231231121113213221231221132221222112112322211o";
            assertEquals(saeIte20, AlgoSimplicite1.RLE("SAE Algo", 20));
        } catch (Exception e) {
            fail("Exception inatendue");
        }
    }

    @Test
    public void testRLERecursifAdditional() {
        try {
            assertEquals("1a", AlgoSimplicite1.RLE("a", 1));
            assertEquals("111a", AlgoSimplicite1.RLE("a", 2));
            assertEquals("311a", AlgoSimplicite1.RLE("a", 3));
            assertEquals("9a3a", AlgoSimplicite1.RLE("aaaaaaaaaaaa", 1));
            assertEquals("191a131a", AlgoSimplicite1.RLE("aaaaaaaaaaaa", 2));
            assertEquals("131a", AlgoSimplicite1.RLE("aaa", 2));
            assertEquals("1113111a", AlgoSimplicite1.RLE("aaa", 3));
        } catch (Exception e) {
            fail("Exception inatendue");
        }
    }

    /*
     * unRLE(RLE(str)) = str
     * unRLE("") = ""
     * unRLE("1a1b1c") = "abc"
     * unRLE("1a2b3c") = "abbccc"
     * unRLE("3a1b2a") = "aaabaa"
     * unRLE("1a1A1a") = "aAa"
     */
    @Test
    public void testUnRLE() {
        try {
            assertEquals("", AlgoSimplicite1.unRLE(""));
            assertEquals("abc", AlgoSimplicite1.unRLE("1a1b1c"));
            assertEquals("abbccc", AlgoSimplicite1.unRLE("1a2b3c"));
            assertEquals("aaabaa", AlgoSimplicite1.unRLE("3a1b2a"));
            assertEquals("aAa", AlgoSimplicite1.unRLE("1a1A1a"));
            assertEquals("WWWWWWWWWWWWW", AlgoSimplicite1.unRLE("9W4W"));
        } catch (Exception e) {
            fail("Exception inatendue");
        }
    }

    @Test
    public void testUnRLEAdditional() {
        try {
            assertEquals("@#$", AlgoSimplicite1.unRLE("1@1#1$"));
            assertEquals("aaaaaaaaaaaa", AlgoSimplicite1.unRLE("9a3a"));
            assertEquals("aaAAaa", AlgoSimplicite1.unRLE("2a2A2a"));
        } catch (Exception e) {
            fail("Exception inatendue");
        }
    }

    @Test
    public void testUnRLERecursif() {
        try {
            assertEquals("", AlgoSimplicite1.unRLE("", 1));
            assertEquals("", AlgoSimplicite1.unRLE("", 3));
            
            assertEquals("abc", AlgoSimplicite1.unRLE("1a1b1c", 1));
            assertEquals("abbccc", AlgoSimplicite1.unRLE("1a2b3c", 1));
            assertEquals("aaabaa", AlgoSimplicite1.unRLE("3a1b2a", 1));
            assertEquals("aAa", AlgoSimplicite1.unRLE("1a1A1a", 1));

            assertEquals("abc", AlgoSimplicite1.unRLE("111a111b111c", 2));
            assertEquals("abc", AlgoSimplicite1.unRLE("311a311b311c", 3));
        } catch (Exception e) {
            fail("Exception inatendue");
        }
    }

    @Test
    public void testUnRLERecursifAdditional() {
        try {
            assertEquals("a", AlgoSimplicite1.unRLE("1a", 1));
            assertEquals("a", AlgoSimplicite1.unRLE("111a", 2));
            assertEquals("a", AlgoSimplicite1.unRLE("311a", 3));
            assertEquals("aaaaaaaaaaaa", AlgoSimplicite1.unRLE("9a3a", 1));
            assertEquals("aaa", AlgoSimplicite1.unRLE("111a111a111a", 2));
        } catch (Exception e) {
            fail("Exception inatendue");
        }
    }
}